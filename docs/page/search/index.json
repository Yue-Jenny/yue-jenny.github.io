[{"content":"Prerequisites 開始前，需要先確保有以下的先備知識\nkubernetes Argo CD 介紹 以 GitOps 為宗旨的 kubernetes 持續部屬 (continuous delivery) 工具 關於 GitOps 可以參考文章 GitOps Getting Started with Argo CD on Docker Desktop 讓我們一步一步開始吧! 💪\n建立 namespace kubectl create namespace argocd 安裝 Argo CD 的 kubernetes resources 需要安裝的 resources 都寫在 install.yaml 內，利用 kubectl apply 指令進行安裝\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml 確認 Argo CD 的 pod 的運行狀態為 running -n 表示指定 namespace 為 argocd，沒設定就是 default namespace\nkubectl get pod -n argocd pod 運行狀態\n取得 Argo CD 初始 admin 的密碼 登入 dashboard 使用\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\u0026#34;{.data.password}\u0026#34; | base64 -d; echo 將 service argocd-server port forward 到本地 將 service argocd-server 的 port 443 導至本地 port 8000\nkubectl port-forward svc/argocd-server -n argocd 8000:443 port forward 成功\n登入 Argo CD dashboard 網址輸入 https://localhost:8000\n成功登入 Argo CD dashboard\n針對 public git repository 建立一組 application 先 fork 範例 repository - argocd-example-apps\n依照官方文件指示步驟進行新增 application\nStep 1 Step 2，填完資訊，按下 CREATE，能在 dashboard 看到 application\napp name: guestbook project: default sync policy: Manual Repository URL Revision: HEAD Path: guestbook Destination/Cluster: https://kubernetes.default.svc Namespace: default 針對 private git repository 建立一組 application 選一組 private repo\n到 Settings/Repositories\n以 ssh-key 方式認證，也能選擇以 Https 的方式驗證\n可參考Argo CD Private Repositories Credential 設定 設定完成會顯示 Successful 建立 application\nStep 1 Step 2\n依照官方文件指示步驟填入資料 成功建立一組 private application 🚀\n解除安裝 application 執行 DELETE 按鈕\n解除安裝 Argo CD ⚠️ 解除安裝 Argo CD 前一定要先解除安裝 application\nkubectl -n argocd delete -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml 參考資料 Argo CD Argo CD getting started 參考文件 kubernetes kubectl port-forward Argo CD Private Repositories Credential 設定 🍀 最後，若喜歡我的分享，可以免費幫我按讚，是對我最大的鼓勵! ✨ ✨ ✨\n","date":"2023-01-04T04:39:13.628Z","permalink":"https://yue-jenny.github.io/post/2023/01/argocd-on-docker-desktop/","title":"使用 Docker Desktop 運行 Argo CD"},{"content":"OpenID Connect (OIDC) 介紹 前言 OIDC 全名為 OpenID Connect，是一種可以 access AWS resources，但不需要存取 AWS credentials 當作 long-lived GitHub secrets 的驗證方式。 官方建議的驗證方式。 OIDC 優點 - 很好的安全實踐 (good security practices) No cloud secrets 不需要以 cloud credentials 當作 long-lived GitHub secrets 在 cloud provider 設定好 OIDC trust，github workflows 就可以利用 OIDC 從 cloud provider 取得一組 short-lived access token Authentication and authorization management 透過 cloud provider 的 authentication (authN) 與 authorization (authZ) 工具能夠控制取得 cloud resources 能更小粒度地控制 workflows 如何使用 credentials Rotating credentials cloud provider 提供一組 short-lived access token 給一個 job，使用完畢後會自動過期。 OIDC 的運作方式與信任機制 運作方式 主要是兩個角色的互動，分別為 Cloud Provider 與 Github OIDC Provider 互動過程 : In your cloud provider, create an OIDC trust between your cloud role and your GitHub workflow(s) that need access to the cloud. Every time your job runs, GitHub\u0026rsquo;s OIDC Provider auto-generates an OIDC token. This token contains multiple claims to establish a security-hardened and verifiable identity about the specific workflow that is trying to authenticate. You could include a step or action in your job to request this token from GitHub\u0026rsquo;s OIDC provider, and present it to the cloud provider. Once the cloud provider successfully validates the claims presented in the token, it then provides a short-lived cloud access token that is available only for the duration of the job. 可參考官方文件 安全 - OIDC trust 當設定 cloud 能信任 GitHub\u0026rsquo;s OIDC provider 後，必須加上一些情境去過濾掉 requests，避免沒有取得信任的 repositories or workflows 可以透過 access token 操作你的 cloud resources。 Configuring OpenID Connect in Amazon Web Services 前言 目的是 Use OpenID Connect within your workflows to authenticate with Amazon Web Services. 官方文件 IAM Role 1. Create a iam role 建立一組 iam role，用於上傳 docker image 到 private ECR 建立 iam role 的時候，會需要填入以下資訊 : provider URL : https://token.actions.githubusercontent.com Audience : sts.amazonaws.com 2. Permissions policies iam role 綁定的 permissions policies 是 AmazonEC2ContainerRegistryPowerUser 此政策允許委託人讀取和寫入儲存庫，以及讀取生命週期政策。委託人不會被授予刪除儲存庫或變更套用至其生命週期政策的許可。 可依據需求設定不同的 permissons policies，可參考官方文件 3. Add the GitHub OIDC provider to IAM Configure the role and trust in IAM.\n到 iam role 頁面點選編輯 Trust relationships\n參考以下的方式將 sub 欄位加入到 Condition 中\n方式一，使用 StringLike\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Federated\u0026#34;: \u0026#34;arn:aws:iam::123456123456:oidc-provider/token.actions.githubusercontent.com\u0026#34; }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRoleWithWebIdentity\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;StringLike\u0026#34;: { \u0026#34;token.actions.githubusercontent.com:sub\u0026#34;: \u0026#34;repo:octo-org/octo-repo:*\u0026#34; }, \u0026#34;StringEquals\u0026#34;: { \u0026#34;token.actions.githubusercontent.com:aud\u0026#34;: \u0026#34;sts.amazonaws.com\u0026#34; } } } ] } 方式二，使用 StringEquals\n\u0026#34;Condition\u0026#34;: { \u0026#34;StringEquals\u0026#34;: { \u0026#34;token.actions.githubusercontent.com:aud\u0026#34;: \u0026#34;sts.amazonaws.com\u0026#34;, \u0026#34;token.actions.githubusercontent.com:sub\u0026#34;: \u0026#34;repo:octo-org/octo-repo:ref:refs/heads/octo-branch\u0026#34; } } 官方文件\nUpdating your GitHub Actions workflow 上述是 AWS 相關設定，此步驟是調整 github workflow，做兩件事情 :\nAdding permissions settings，有兩種權限選擇，可依照自身情境去選擇。\nfetch an OIDC token for a workflow, then the permission can be set at the workflow level.\npermissions: id-token: write # This is required for requesting the JWT contents: read # This is required for actions/checkout only need to fetch an OIDC token for a single job\npermissions: id-token: write # This is required for requesting the JWT Use the aws-actions/configure-aws-credentials action\n此 action 會接收來自 GitHub OIDC provider 的 JWT，並且向 AWS 請求一組 access token - name: Configure AWS credentials uses: aws-actions/configure-aws-credentials@v1 with: role-to-assume: arn:aws:iam::1234567890:role/example-role role-session-name: GitHubActionsWithAwsEcrUsingOIDCSession aws-region: ${{env.AWS_DEFAULT_REGION}} 參考資料 configuring-openid-connect-in-amazon-web-services about-security-hardening-with-openid-connect 最後，若喜歡我的分享，可以免費幫我按讚，是對我最大的鼓勵!\n","date":"2022-12-29T14:32:24+08:00","permalink":"https://yue-jenny.github.io/post/how-to-use-oidc-to-auth-aws-services/","title":"在 Github workflow 中使用 OpenID Connect (OIDC) 去認證 AWS 服務"},{"content":"Github Workflow 介紹 前言 為了利用 Github Workflow 完成 CI/CD，分成幾個部分來寫，分別是\nGithub Workflow 的基本設定 Github Workflow 中進行 CI 登入登出 AWS ECR 與 github container registry build \u0026amp; upload image 更新 helm value 中的 image tag，後續讓 argocd 得以偵測到 helm values 的變化後，進行自動化部屬 基本設定 action 為 push 的時候，所有 branch 都會進行 github workflow action 為 pull_request 的時候，只有 main branch 會進行 github workflow types paths on: push: branches: [\u0026#34;*\u0026#34;] pull_request: branches: [\u0026#34;main\u0026#34;] types: - opened paths: - \u0026#34;**.js\u0026#34; env 設定 設定方式如下，可以依照自身需求進行設定 env: AWS_DEFAULT_REGION: ap-southeast-1 GIT_USER_NAME: jennyc permissions 設定 設定方式如下，可以依照自身需求進行設定 permissions: id-token: write # This is required for requesting the JWT contents: read # This is required for actions/checkout 自動化測試 CI checkout repository 使用 actions/checkout@v3 進行\n- name: Checkout repository uses: actions/checkout@v3 執行 npm install - name: Install dependencies run: npm install 執行 npm test - name: Run tests run: npm run test Build multi-platform images 並上傳至 AWS ECR 前言 這部分需要先設定 AWS Credential 才能使用 AWS ECR，\n接著 build multi-platform image 並且上傳至 AWS ECR。\n1. 設定 AWS Credential 設定 AWS Credential\n使用 GitHub\u0026rsquo;s OIDC provider 方式取得 short-lived credentials\nOpenID Connect (OIDC) 設定方式可以參考官方文件 也可以參考這篇文章 workflow 要怎麼寫?\nenv.AWS_DEFAULT_REGION 需要特別設定，與 AWS ECR 相同的 region role-to-assume 填入 AWS role role-session-name 預設是 GitHubActions，可以自行調整名稱 - name: Configure AWS credentials uses: aws-actions/configure-aws-credentials@v1 with: role-to-assume: arn:aws:iam::1234567890:role/example-role role-session-name: GitHubActionsWithAwsEcrUsingOIDCSession aws-region: ${{env.AWS_DEFAULT_REGION}} 2. 登入 AWS private ECR 有兩種方式 Using access key id and secret access key to login\n- name: Configure AWS credentials uses: aws-actions/configure-aws-credentials@v1 with: aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} aws-region: ap-southeast-1 Using OpenID Connect (OIDC) to login\n官方推薦使用此方式 - name: Login to Amazon ECR id: login-ecr uses: aws-actions/amazon-ecr-login@v1 3. 登入 AWS public ECR 可參考官方說明 4. 登出 AWS ECR - name: Logout of Amazon ECR if: always() run: docker logout ${{ steps.login-ecr.outputs.registry }} 5. 設定 short sha 為 image tag 設定以 7 digits 長度的 short sha 作為 image tag，原因可以參考: 7 digits are the Git default for a short SHA 附上其他參考文件 Chapter 7 of the Pro Git book 將 output 出去的參數命名為 sha_short - name: Set short sha outputs id: vars run: echo \u0026#34;sha_short=$(git rev-parse --short HEAD)\u0026#34; \u0026gt;\u0026gt; $GITHUB_OUTPUT 6. Build multi-platform images 並上傳 images 到 AWS ECR 建立多平台 docker images 的官方文件 IMAGE_TAG 會從步驟 5 取得 output 的變數 sha_short --platform 可接上需要的 platform 參考，例如 linux/amd64, linux/arm64 - name: Build, tag, and push docker image to Amazon ECR env: REGISTRY: ${{ steps.login-ecr.outputs.registry }} REPOSITORY: pet-app IMAGE_TAG: ${{ steps.vars.outputs.sha_short }} run: | docker run --rm --privileged multiarch/qemu-user-static --reset -p yes ( 官方建議: docker run --privileged --rm tonistiigi/binfmt --install all ) docker buildx create --name mybuilder --driver docker-container --bootstrap docker buildx use mybuilder docker buildx inspect docker buildx build --platform linux/amd64,linux/arm64 -t $REGISTRY/$REPOSITORY:$IMAGE_TAG --push . 為什麼需要 docker run --rm --privileged multiarch/qemu-user-static --reset -p yes ?\n因為遇到 Error: while loading /usr/local/sbin/node: No such file or directory 問題 先使用方式一 : 連接方式，結果還是有相同問題 ln -s /usr/bin/node /usr/local/sbin/node 後來使用方式二 使用 docker buildx 指令前先執行以下命令\ndocker run --rm --privileged multiarch/qemu-user-static --reset -p yes 詳細原因的 Stack Overflow 原始文章在這邊，以下是節錄部分\n` When you ask the Linux kernel to run some executable file, it needs to know, how to load this specific file, and whether this file is compatible with current machine, or not. By default, the ELF binary compiled for, say, arm64v8 is rejected by the kernel, running on amd64 hardware.\nHowever, the binfmt_misc feature of the kernel allows you to tell it, how to handle the executables it cannot usually handle on its own - this includes the cases when the kernel does not know the binary format or considers it incompatible with current machine.\n`\ngithub issue\n官方建議使用以下命令解決 QEMU binaries 問題，官方文件\ndocker run --privileged --rm tonistiigi/binfmt --install all 更新 helm value 的 image tag 前言 應用是以 terraform 方式部屬，並搭配使用 helm charts。而 docker image 的 tag 是寫在 helm values 內。\n目標是更新 helm values 的 docker image tag 值，後續讓 argocd 得以偵測到 helm values 的變化後，進行自動化部屬。\n需做到兩件事情:\ncheckout 私有 repository 設定與更新 image tag 1. 先 checkout 私有存放 helm value 的 repository 需要先設定 credential 才能 fetch private repository，有兩種設定的方式\n設定 deploy key\n步驟如下，可參考這篇\nCreate a new SSH key pair for your repository. Do not set a passphrase. Copy the contents of the public key (.pub file) to a new repository deploy key and check the box to \u0026ldquo;Allow write access.\u0026rdquo; Add a secret to the repository containing the entire contents of the private key. As shown in the example below, configure actions/checkout to use the deploy key you have created. workflow 要怎麼寫?\nssh-key 填入 private key 的 secrets 名稱 path 設定 checkout 的 repo 會存在哪一個資料夾內 - name: Checkout ${{env.TERRAFORM_REPOSITORY_NAME}} repo and push file to ${{env.TERRAFORM_REPOSITORY_NAME}} uses: actions/checkout@v3 with: repository: ${{env.TERRAFORM_REPOSITORY_OWNER_NAME}}/${{env.TERRAFORM_REPOSITORY_NAME}} ssh-key: ${{ secrets.SSH_PRIVATE_KEY }} path: ${{env.TERRAFORM_REPOSITORY_NAME}} 設定 Personal access token (PAT)\n建立 PAT 的方式，官方文件\n將建立完成的 PAT 設定到 repository 的 secrets 中，設定的 secrets 名稱為 GH_PAT，官方文件\nworkflow 要怎麼寫?\nrepository 設定為 owner/repository_name token 填入 PAT 的 secrets 名稱，這邊是將 secrets 名稱為 GH_PAT 的內容設定為 PAT - name: Checkout ${{env.TERRAFORM_REPOSITORY_NAME}} repo and push file to ${{env.TERRAFORM_REPOSITORY_NAME}} uses: actions/checkout@v3 with: repository: ${{env.TERRAFORM_REPOSITORY_OWNER_NAME}}/${{env.TERRAFORM_REPOSITORY_NAME}} token: ${{ secrets.GH_PAT }} 2. 設定 image tag 設定以 7 digits 長度的 short sha 作為 image tag 7 digits are the Git default for a short SHA 附上其他參考文件 Chapter 7 of the Pro Git book - name: Set short sha outputs id: vars run: echo \u0026#34;sha_short=$(git rev-parse --short HEAD)\u0026#34; \u0026gt;\u0026gt; $GITHUB_OUTPUT 3. 更新 image tag 以 yq 的 github action 工具修改 yaml 檔內的 image tag 值 yq 的官方文件 yq 的 github 進行 git 操作，設定 user name, user email、commit 以及 push tag 取上一個步驟 output 的參數 sha_short - name: Update image tag uses: mikefarah/yq@master with: cmd: yq -i \u0026#39;.pet_app_dashboard_site.image.tag = \u0026#34;${{ steps.vars.outputs.sha_short }}\u0026#34;\u0026#39; ./${{env.TERRAFORM_REPOSITORY_NAME}}/${{env.HELM_FILE_NAME}} - run: | cd ${{env.TERRAFORM_REPOSITORY_NAME}} git config user.name ${{env.GIT_USER_NAME}} git config user.email ${{env.GIT_USER_EMAIL}} git add ${{env.HELM_FILE_NAME}} git commit -m \u0026#34;update image tag to ${{ steps.vars.outputs.sha_short }}\u0026#34; git push origin main 若要將 docker image 上傳至 github container registry 該怎麼做? 1. 登入與登出 github container registry 需要設定 env.REGISTRY 為 ghcr.io\n不需要另外設定 github.actor 與 GITHUB_TOKEN\n- name: Login to GitHub Container Registry uses: docker/login-action@v2 with: registry: ${{ env.REGISTRY }} username: ${{ github.actor }} password: ${{ secrets.GITHUB_TOKEN }} 2. Extract metadata - name: Extract metadata (tags, labels) for Docker id: meta uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38 with: images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} 3. Build and push docker image labels 的值可以從步驟二取出 outputs labels 來使用 - name: Build and push Docker image uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc with: context: . push: true tags: ${{ env.REGISTRY }}/${{ env.REPO }}:${{ steps.vars.outputs.sha_short }} labels: ${{ steps.meta.outputs.labels }} 參考資料 actions/checkout amazon-ecr-login docker/login-action docker-build-fails-for-arm-images yq 的官方文件 yq 的 github Chapter 7 of the Pro Git book creating-a-personal-access-token creating-and-using-encrypted-secrets 最後，若喜歡我的分享，可以免費幫我按讚，是對我最大的鼓勵!\n","date":"2022-12-10T18:33:05+08:00","permalink":"https://yue-jenny.github.io/post/github-workflow/","title":"如何使用 Github Workflow 完成 CI/CD"},{"content":"如何用 github pages host 靜態檔案? 讓我們一步一步開始吧! 💪\n1. Create a repository 2. Naming repository name 將 repository 依據模板 username.github.io 命名 ⚠️ username 是帳戶名稱 查看自己的 URL 可以查出 username，依據模板 https://github.com/YOUR_USERNAME 呈現 我帳戶名稱是 Yue-Jenny，username 需設定為 yue-jenny 3. 上傳你的靜態檔案到 github 參考\u0026quot;為什麼我決定使用 hugo 建立一個 blog 系統 📙，以及我該如何建立?\u0026quot;，用 hugo 建立你的部落格系統，並將 publishing directory 的靜態檔案上傳到 github repository 4. 設定 到 repository 的 Settings 頁籤\n\u0026ldquo;Code and automation\u0026rdquo; 區塊中點選 Pages\n\u0026ldquo;Source\u0026rdquo; 選 Deploy from a branch\n\u0026ldquo;Branch\u0026rdquo; 選 publishing 的來源\n\u0026ldquo;為什麼我決定使用 hugo 建立一個 blog 系統 📙，以及我該如何建立?\u0026rdquo; 設定 publishing directory 為 docs，所以選 docs 5. 拜訪你的新網站 🔥 瀏覽器輸入 URL username.github.io\n參考資料 github pages quickstart 最後，若喜歡我的分享，可以免費幫我按讚，是對我最大的鼓勵!\n","date":"2022-12-10T18:25:43+08:00","permalink":"https://yue-jenny.github.io/post/host-static-file-on-github-pages/","title":"如何用 github pages host 靜態檔案?"},{"content":"為什麼我決定使用 Hugo \u0026amp; Github pages 建立一個 blog 系統? 1. 內容保存與控管 ✅ 文章內容以 markdown 語法撰寫與保存，熟悉 markdown 語法後，會發現很方便 👍 推薦使用 vscode 作為編輯器 ☝️ 加入 extension 可確認 markdown 內容呈現 ✌️ 直接執行指令運行網站 ✅ 內容可定期放上雲端保存備份，不用擔心若部落格系統下線後，文章也跟著消失或者該如何備份 ✅ 修改內容時，不怕線上部落格系統出現問題，輸入到一半的內容直接消失 ( 曾經有類似的經驗，全部重來 😓) 2. 可高度客製化 ✅ 客製字體大小顏色、主題套件等 UI 的部分 ✅ 自由決定要加入哪些功能，建立擁有自我風格的部落格系統 💪 評論區(支援不同多種軟體) LikeCoin button Table of contents 頁首與頁尾設計 \u0026hellip; etc Hugo \u0026amp; Github pages 基本知識 1. Hugo 介紹 引用自官方文件說明 Hugo is a fast and modern static site generator written in Go, and designed to make website creation fun again.\n2. Github pages 介紹 引用自官方文件說明 You can use GitHub Pages to showcase some open source projects, host a blog, or even share your résumé. This guide will help get you started on creating your next website.\nGetting start，讓我們進入正題吧! 基本功能 1. Prerequisites\nInstall Hugo，安裝能夠 compile go language 的工具，不同 OS 安裝不同的檔案 Install Git，後續下載 theme 使用 2. Create a site\nhugo new site quickstart 3. 到 quickstart 目錄，並執行 initial git repository\ncd quickstart git init 4. clone ananke theme，並以 git submodule 方式存在\n若想了解 git submodule，可參考官方文件\ngit submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke 5. 設定 site configuration file\n在 config.toml 加入這行\ntheme = \u0026#39;ananke\u0026#39; 6. 本地啟動 hugo 專案\n本地啟動 hugo 專案，-p 是指定 port 為 8080\n想知道更多 hugo 命令行可以點這邊\nhugo server -p 8080 瀏覽器輸入 https://localhost:8080，可確認頁面已出現 (這時還沒有文章內容)\n7. 開始寫文章\n建立一個 markdown 檔案，markdown 檔案內的設定的意義\ntitle - 文章標題 date - 建立此文章的時間，文章會跟著時間排序 draft - 是否為草稿，production 環境建議只顯示非草稿的文章，寫完文章可改為 false，再執行 build 指令，讓 markdown 變成 html 等靜態檔案。 hugo new content/post/oidc-aws/index.md 8. 運行網站\n寫完文章內容後 ✏️，設定 markdown 檔案內的 draft 為 false，表示非 draft 模式，重刷頁面可看到文章\n若需要在 draft 模式下顯示文章，需調整啟動 server 的命令行\n-D表示 --buildDrafts，會包含註記為 draft 的內容 hugo server -D -p 8080 成功 🚀 🚀 🚀 9. host on github page\n設定 github pages，請參考 如何用 github pages host 靜態檔案 基本客製化功能 hugo 提供一些客製化功能，來看看應該怎麼做?\n如何設定 publish 資料夾? 在 config.toml 中加入以下設定，能將 publish 資料夾設定為 docs，而 Github pages 能 host docs 資料夾內的靜態檔案\npublishDir = \u0026#34;docs\u0026#34; 如何替換成不同 theme? 我使用的主題是 hugo-theme-stack ( 官方文件 )，該如何調整?\nclone hugo-theme-stack theme git submodule add https://github.com/CaiJimmy/hugo-theme-stack themes/hugo-theme-stack 調整 config.toml 的設定值 theme theme = \u0026#39;hugo-theme-stack\u0026#39; 如何客製化文章中的 font family? 調整 themes\\hugo-theme-stack\\layouts\\partials\\head\\custom.html ，內容如下\n以 google fonts 作為字體來源、以 css2 作為樣式來源 \u0026lt;style\u0026gt; :root { --article-font-family: \u0026#34;Literata\u0026#34;, var(--base-font-family); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; (function () { const customFont = document.createElement(\u0026#39;link\u0026#39;); customFont.href = \u0026#34;https://fonts.googleapis.com/css2?family=Literata:wght@400;700\u0026amp;display=swap\u0026#34;; customFont.type = \u0026#34;text/css\u0026#34;; customFont.rel = \u0026#34;stylesheet\u0026#34;; document.head.appendChild(customFont); }()); \u0026lt;/script\u0026gt; 參考官方文件\n如何客製化建立 index.md 的模板? 調整 archetypes\\default.md 有其他更進階的用法，請參考官方文件 進階客製化 ☝️ 如何在 Hugo 的文章中加入 LikeCoin button? LikeCoin 是強調內容有價的而出現的虛擬貨幣，可給作者支持與鼓勵 實作方式: 註冊 Liker ID\n建立 themes\\hugo-theme-stack\\layouts\\partials\\likecoin.html\n\u0026lt;iframe class=\u0026#34;LikeCoin\u0026#34; height=\u0026#34;235\u0026#34; src=\u0026#34;https://button.like.co/in/embed/{{ .Site.Params.likerID }}/button?referrer={{ .Permalink }}\u0026#34; width=\u0026#34;100%\u0026#34; frameborder=0\u0026gt;\u0026lt;/iframe\u0026gt; 在 config.toml 中加入以下程式碼，並將 [LikerID] 更改為你的 Liker ID\n[Params] likerID = \u0026#34;YOUR_LIKERID\u0026#34; 在文章的模板中加入 LikeCoin button\n將以下的程式碼填入 themes\\hugo-theme-stack\\layouts\\partials\\article\\article.html 中\n{{ partial \u0026#34;likecoin.html\u0026#34; . }} 官方文件 進階客製化 ✌️ 如何使用 Google Console Search 偵測網站的收錄情況? 藉由了解網站成效，並針對弱點進行優化，可增加網站的曝光率 🌟 進階客製化 👌 SEO 搜尋引擎優化 google 會依據網頁網址建立 index，搜尋結果會先呈現有建立 index 的網頁 因此為了強化網頁的 SEO，將你建立 sitemap 交給 google ，讓 google 搜尋可快速找到你的網頁 注意事項 ⚠️ 執行完 build 指令後，建議習慣檢查 docs 資料夾 ( 或你的 publish 資料夾 ) 內的 html 變化是否符合預期\n心得 這應該是第二次使用 framework 方式建立靜態文件系統，第一次是使用 vuepress 協助公司建立內部文件系統，這次是使用 hugo。前者是以 javascript 為當作開發語言，後者是以 go 為開發語言。兩者都蠻推薦。 最重要的是了解該框架是如何運行的，在高度客製化功能或者修改問題的時侯才不會瞎子摸象般的亂試。 hugo 有 64.5k 🌟 (截止至 20230103)，很多人持續貢獻與維護 🙏 ，因此軟體工程師從頭到尾依靠官方文件與 google 完成基本建立不難。 參考資料 github pages quickstart hugo documentation self host likecoin button css2 fifty of the most popular hugo themes / hugo 熱門主題大公開 Build and submit a sitemap to google ","date":"2022-12-10T18:22:43+08:00","permalink":"https://yue-jenny.github.io/post/build-with-hugo/","title":"為什麼我決定使用 hugo 建立一個 blog 系統 📙，以及我該如何建立?"}]