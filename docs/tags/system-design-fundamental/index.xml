<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>System Design Fundamental on Jenny blog</title>
        <link>https://yue-jenny.github.io/tags/system-design-fundamental/</link>
        <description>Recent content in System Design Fundamental on Jenny blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Wed, 18 Jan 2023 10:32:40 +0800</lastBuildDate><atom:link href="https://yue-jenny.github.io/tags/system-design-fundamental/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>系統設計基礎(三) MapReduce</title>
        <link>https://yue-jenny.github.io/2023/01/%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E%E4%B8%89-mapreduce/</link>
        <pubDate>Wed, 18 Jan 2023 10:32:40 +0800</pubDate>
        
        <guid>https://yue-jenny.github.io/2023/01/%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E%E4%B8%89-mapreduce/</guid>
        <description>&lt;h2 id=&#34;mapreduce&#34;&gt;MapReduce&lt;/h2&gt;
&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;MapReduce 是一個 Google 提出的軟體架構，適用於&lt;strong&gt;大規模資料的並列運算&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;prerequistites&#34;&gt;Prerequistites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;File System
&lt;ul&gt;
&lt;li&gt;資料的儲存系統&lt;/li&gt;
&lt;li&gt;有許多不同型態，例如以垂直結構為主的目錄與資料夾、Object storage 等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Distributed File System
&lt;ul&gt;
&lt;li&gt;分散式檔案系統，透過一大群機器(cluster)互相合作，對外表現如同&lt;strong&gt;一個巨大的 file system&lt;/strong&gt;，將 data 切成特定大小的 chunks (如 4 MB 或 64 MB)，會透過 &lt;strong&gt;central control plane&lt;/strong&gt; 會決定應該將 chunks 存在哪一個 node，後續應該去哪一個 node 讀取 chunks&lt;/li&gt;
&lt;li&gt;主要操作方式是透過&lt;strong&gt;網路&lt;/strong&gt;以定義好的通訊協定進行資料存取&lt;/li&gt;
&lt;li&gt;目前現有的產品有 Google File System (GFS)、Hadoop Distributed File System (HDFS)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hadoop
&lt;ul&gt;
&lt;li&gt;支持 MapReduce 與資料管線的 open-source 框架，最重要的中央組件為 Hadoop Distributed File System (HDFS)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;各階段簡介&#34;&gt;各階段簡介&lt;/h3&gt;
&lt;h4 id=&#34;map-階段&#34;&gt;Map 階段&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;負責 &lt;strong&gt;filtering&lt;/strong&gt; 和 &lt;strong&gt;sorting&lt;/strong&gt; 並且組合出一個 key value pair 結果&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;reduce-階段&#34;&gt;Reduce 階段&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;負責&lt;strong&gt;資料整合&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;以 wordcount 為例，從 Map 傳過來的 key 若一樣，表示同一個字，因此把一樣的 key 做加總，可以得出最後的出總筆數&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;冪等性idempotency特性&#34;&gt;冪等性(idempotency)特性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;意義: &lt;strong&gt;當操作多次，結果應呈現一致&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;透過 pub/sub messaging system 應當有冪等性，因為 pub/sub 系統本身允許相同訊息被 consumer 接收多次&lt;/li&gt;
&lt;li&gt;舉例，增加資料庫某欄位的 integer value，就不是一個具有冪等性的操作，因為保持每次增加的操作後都不會保持跟前一個相同的數值&lt;/li&gt;
&lt;li&gt;另一舉例，將欄位值設定為 &amp;ldquo;DONE&amp;rdquo;，多次重複此操作，還是會顯示為 &amp;ldquo;DONE&amp;rdquo;，因此設定為 &amp;ldquo;DONE&amp;rdquo; 是一個冪等性操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;範例&#34;&gt;範例&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;input&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;要做計算的原始資料，可以是一堆文字清單等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;split&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;把 input 資料做分散處理&lt;/li&gt;
&lt;li&gt;以 hadoop 來說，當 MapReduce 工作被輸入的時候，會被&lt;strong&gt;切割到各個 cluster 裡面等待做處理&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;🔔&lt;strong&gt;map&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;MapReduce 的 map 階段&lt;/li&gt;
&lt;li&gt;每一個節點有自己的一份資料要分析，會把對應切割出來的資料&lt;strong&gt;建立 key value 的結果&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;key 是字本身，value 是 1 代表找到一筆&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;combine&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;在 map 的機器進行以下動作&lt;/li&gt;
&lt;li&gt;將一樣的 key 先做一次加總，避免傳送多次出去，例如 combine 後的結果可能是 &amp;ldquo;A&amp;rdquo; 有 2 筆、&amp;ldquo;B&amp;rdquo; 有 1 筆等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;shuffle &amp;amp; sort&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;在進入 reduce 階段之前，會先被做一個&lt;strong&gt;排序&lt;/strong&gt;，因此&lt;strong&gt;相關的 key 會放在一起&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;比如第一批資料的 &amp;ldquo;A&amp;rdquo; 有 2 筆、第二批資料的 &amp;ldquo;A&amp;rdquo; 有 5 筆&amp;hellip;第一批資料的 &amp;ldquo;B&amp;rdquo; 有 1 筆、第二批資料的 &amp;ldquo;B&amp;rdquo; 有 3 筆&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;🔔&lt;strong&gt;reduce&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;此階段會做&lt;strong&gt;實際的加總&lt;/strong&gt;，因此每一個 key 的 value 會被加總&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;output&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;最後得到的結果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://yue-jenny.github.io/2023/01/%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E%E4%B8%89-mapreduce/061114_0930_Introductio1.jpg&#34;
	width=&#34;642&#34;
	height=&#34;460&#34;
	srcset=&#34;https://yue-jenny.github.io/2023/01/%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E%E4%B8%89-mapreduce/061114_0930_Introductio1_hu4f185708e50b3a3419973268adc34821_28898_480x0_resize_q75_box.jpg 480w, https://yue-jenny.github.io/2023/01/%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E%E4%B8%89-mapreduce/061114_0930_Introductio1_hu4f185708e50b3a3419973268adc34821_28898_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;source: https://www.guru99.com/introduction-to-mapreduce.html&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;139&#34;
		data-flex-basis=&#34;334px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;參考資料-&#34;&gt;參考資料 👐&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;system expert&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zh.wikipedia.org/zh-tw/MapReduce&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;wiki MapReduce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.guru99.com/introduction-to-mapreduce.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;introduction-to-mapreduce&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;🍀 最後，若喜歡我的分享，可以幫我拍拍手👏，是對我最大的鼓勵!✨&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>系統設計基礎(二) Cache</title>
        <link>https://yue-jenny.github.io/2023/01/%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E%E4%BA%8C-cache/</link>
        <pubDate>Tue, 17 Jan 2023 11:04:46 +0800</pubDate>
        
        <guid>https://yue-jenny.github.io/2023/01/%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E%E4%BA%8C-cache/</guid>
        <description>&lt;h2 id=&#34;cache-快取&#34;&gt;Cache 快取&lt;/h2&gt;
&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;快取對於系統層面上相當重要，用的好、用的巧，有助於整體系統的順暢度。&lt;br&gt;
因此目標是了解👉為什麼使用、👉使用策略與👉何時使用。&lt;/p&gt;
&lt;h3 id=&#34;prerequistites&#34;&gt;Prerequistites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;cache
&lt;ul&gt;
&lt;li&gt;意思是將一部分的資料儲存起來，需要使用的時候，不需要經過後端或者資料庫再拿一次，優勢是取得資料較快&lt;/li&gt;
&lt;li&gt;通常使用的情境是將常用且不經常修改的 response 儲存，不必每次都去跟後端與資料庫請求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cache hit
&lt;ul&gt;
&lt;li&gt;需要的資料能在快取中找到 🉐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cache miss
&lt;ul&gt;
&lt;li&gt;需要的資料無法在快取中找到 🈚&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;content delivery network (CDN)
&lt;ul&gt;
&lt;li&gt;一種第三方服務，扮演的角色就像快取，為什麼呢 ? 請往下看&lt;/li&gt;
&lt;li&gt;越來越多服務的據點散布全球🌏，若 server 只有在幾個國家，其他國家的使用者可能會遇到網頁轉很久等問題⌛，中間網路傳輸耗時太長導致 latency 長，此時若有散布全球的 CDN server，請求就能先傳送到 CDN server 處理，縮短 latency&lt;/li&gt;
&lt;li&gt;舉例一些 CDN 廠商，如 Cloudflare 與 Google cloud CDN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-個使用快取的目的&#34;&gt;3 個使用快取的目的&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;利用前端快取，減少請求到後端&lt;/li&gt;
&lt;li&gt;減少對資料庫的請求，降低資料庫壓力&lt;/li&gt;
&lt;li&gt;避免 long compute operation，增加系統速度&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快取更新機制&#34;&gt;快取更新機制&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;write through cache
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同時&lt;/strong&gt;更新資料庫與快取的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;write back cache
&lt;ul&gt;
&lt;li&gt;先更新快取，再以&lt;strong&gt;非同步&lt;/strong&gt;的方式更新資料庫的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;快取替換機制-cache-eviction-policy&#34;&gt;快取替換機制 Cache eviction policy&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Least &lt;strong&gt;Recently&lt;/strong&gt; Used (LRU)
&lt;ul&gt;
&lt;li&gt;依照&lt;strong&gt;最近使用時間&lt;/strong&gt;來排序&lt;/li&gt;
&lt;li&gt;思路:
&lt;ul&gt;
&lt;li&gt;最近使用時間最接近，表示近期內使用到的可能性也越高&lt;/li&gt;
&lt;li&gt;優先替換掉最近使用時間距離當下最遠的那組數據&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Least &lt;strong&gt;Frequently&lt;/strong&gt; Used (LFU)
&lt;ul&gt;
&lt;li&gt;依照&lt;strong&gt;使用頻率&lt;/strong&gt;來排序&lt;/li&gt;
&lt;li&gt;思路:
&lt;ul&gt;
&lt;li&gt;使用次數越高⬆️，表示近期內使用到的可能性也越高⬆️&lt;/li&gt;
&lt;li&gt;優先替換掉使用次數最低的那組數據&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;First in First out (FIFO)
&lt;ul&gt;
&lt;li&gt;顧名思義，&lt;strong&gt;先進先出&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;思路: 最先進去快取的資料，越早會被淘汰&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;參考資料-&#34;&gt;參考資料 👐&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;System expert&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;🍀 最後，若喜歡我的分享，可以幫我拍拍手👏，是對我最大的鼓勵!✨&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>系統設計基礎(一) Security And HTTPS</title>
        <link>https://yue-jenny.github.io/2023/01/%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E%E4%B8%80-security-and-https/</link>
        <pubDate>Mon, 16 Jan 2023 12:35:00 +0800</pubDate>
        
        <guid>https://yue-jenny.github.io/2023/01/%E7%B3%BB%E7%B5%B1%E8%A8%AD%E8%A8%88%E5%9F%BA%E7%A4%8E%E4%B8%80-security-and-https/</guid>
        <description>&lt;h2 id=&#34;security-and-https&#34;&gt;Security And HTTPS&lt;/h2&gt;
&lt;h3 id=&#34;前言&#34;&gt;前言&lt;/h3&gt;
&lt;p&gt;除了了解前/後端語言與框架如何使用外，也希望能對 Http/Https 的原理與安全機制有所了解。&lt;/p&gt;
&lt;h3 id=&#34;prerequistites&#34;&gt;Prerequistites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IP Packet&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;透過 IP 傳送的最小數據的單位，通常會包含 IP Header 與 payload&lt;/li&gt;
&lt;li&gt;IP Header 包含來源與目的地的 IP Address&lt;/li&gt;
&lt;li&gt;payload 就是你要傳送的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Man-In-The-Middle Attack (又稱呼為 MITM)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;意思是攔截 client 與 server 間傳送的訊息 💬&lt;/li&gt;
&lt;li&gt;若 client 與 server 間傳送訊息有透過&lt;code&gt;加密&lt;/code&gt;與 &lt;code&gt;Https&lt;/code&gt; 可防止資料被竊取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Symmetric Encryption (對稱加密)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密與解密資料都使用&lt;strong&gt;同一把 key&lt;/strong&gt; 🔑&lt;/li&gt;
&lt;li&gt;缺點是安全性會有所疑慮，key 通常會被分享到一個點或多個點&lt;/li&gt;
&lt;li&gt;優點是速度比非對稱加密快 🐇&lt;/li&gt;
&lt;li&gt;最廣泛使用的演算法是 Advanced Ecryption Standard(AES)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Asymmetric Encryption (非對稱加密)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加密與解密資料會利用到&lt;strong&gt;兩把 key&lt;/strong&gt; 🔑🔑，分別為 public key 與 private key&lt;/li&gt;
&lt;li&gt;public key 負責加密資料，只能利用相對應的 private key 解密資料&lt;/li&gt;
&lt;li&gt;所以 public key 分享給需要加密資料的一端，而 private key 則需要 &lt;strong&gt;安全地保存&lt;/strong&gt; ㊙️&lt;/li&gt;
&lt;li&gt;速度會比對稱加密慢 🐢&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced Ecryption Standard(AES)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;最廣泛&lt;/strong&gt;使用的&lt;strong&gt;加密標準&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;三種對稱演算法分別為 AES-128、AES-192、AES-256&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transport Layer Security (TLS)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;傳輸層&lt;/strong&gt;的一種協定，目的是為了網路通訊時的安全，確保沒有第三方能竊聽或者竊取任何資訊&lt;/li&gt;
&lt;li&gt;衍生於另一種安全協定 Secure Socket Layer (SSL)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SSL certificate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由 certificate authority (CA) 頒發給 server 的數位憑證&lt;/li&gt;
&lt;li&gt;內容包含 server 端的 public key，因為在 TLS Handshake 過程中會使用到&lt;/li&gt;
&lt;li&gt;目的是確認&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;http-vs-https&#34;&gt;Http vs Https&lt;/h3&gt;
&lt;h4 id=&#34;http&#34;&gt;Http&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;全名為 HyperText Transfer Protocol&lt;/li&gt;
&lt;li&gt;一種常見的網路通訊協議&lt;/li&gt;
&lt;li&gt;流程是 client 送出 http request，而 server 送出回應&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;https&#34;&gt;Https&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;全名為 HyperText Transfer Protocol &lt;strong&gt;Secure&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;顧名思義是為了可於網路上🔐&lt;strong&gt;安全地&lt;/strong&gt;通訊而出現的一種網路通訊協議&lt;/li&gt;
&lt;li&gt;為了達到上述要求，因此 server 被要求須具備以下兩項
&lt;ul&gt;
&lt;li&gt;須獲得可信任的憑證(&lt;code&gt;SSL certificates&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;Transport Layer Security (TLS)&lt;/code&gt; 加密 client 與 server 端的數據。TLS 如何運作，請往下看。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tls-連接是透過-tls-handshake-來啟動&#34;&gt;TLS 連接是透過 TLS Handshake 來啟動&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;流程
&lt;ul&gt;
&lt;li&gt;client 送出 &lt;code&gt;client hello&lt;/code&gt; (隨機的 bytes) 給 server&lt;/li&gt;
&lt;li&gt;server 回應 &lt;code&gt;server hello&lt;/code&gt; (也是隨機的 bytes) 以及 SSL certificate&lt;/li&gt;
&lt;li&gt;client 驗證 CA 頒發的憑證，確認憑證正確屬於此 server 擁有&lt;/li&gt;
&lt;li&gt;client 接著會送出一組用 public key 加密的 &lt;code&gt;premaster secret&lt;/code&gt; 給 server&lt;/li&gt;
&lt;li&gt;client 和 server 將會使用 &lt;code&gt;client hello&lt;/code&gt;, &lt;code&gt;server hello&lt;/code&gt;與 &lt;code&gt;premaster secret&lt;/code&gt; 產生對稱加密的 &lt;code&gt;session keys&lt;/code&gt;，用於後續的通訊內容的加密與解密 🔐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tcp-利用-handshake-方式來連接與斷連&#34;&gt;TCP 利用 Handshake 方式來連接與斷連&lt;/h3&gt;
&lt;h4 id=&#34;tcp-三次握手建立連線&#34;&gt;TCP 三次握手(建立連線)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一次握手：
&lt;ul&gt;
&lt;li&gt;客戶端傳送請求 SYN 報文給服務端，傳送完畢之後，客戶端處於 SYN_Send 狀態。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二次握手：
&lt;ul&gt;
&lt;li&gt;服務端收到請求報文之後，&lt;strong&gt;如果同意連線，會回傳 SYN + ACK 應答報文&lt;/strong&gt;，服務端為SYN_Receive狀態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三次握手：
&lt;ul&gt;
&lt;li&gt;客戶端接收到服務端的 SYN + ACK ，然後&lt;strong&gt;傳送確認報文作為應答&lt;/strong&gt;，客戶端轉為Established狀態&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;為什麼一定要三次?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;為了防止已失效的連接請求報文段突然又傳送到了服務端，因而產生錯誤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;tcp-四次握手結束連線&#34;&gt;TCP 四次握手(結束連線)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;流程
&lt;ul&gt;
&lt;li&gt;第一次分手
&lt;ul&gt;
&lt;li&gt;客戶端傳送FIN=1告訴服務端，客戶端所有的資料&lt;strong&gt;全部發送完畢&lt;/strong&gt;，服務端可以關閉接收了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第二次分手
&lt;ul&gt;
&lt;li&gt;服務端接收到客戶端的釋放請求連線之後，知道客戶端沒有資料傳送給自己了，然後&lt;strong&gt;服務端傳送ACK=1告訴客戶端接收到你發給我的訊息&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第三次分手
&lt;ul&gt;
&lt;li&gt;告訴客戶端，&lt;strong&gt;服務端的所有資料傳送完畢&lt;/strong&gt;，客戶端你也可以關閉接收資料連線了。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第四次分手
&lt;ul&gt;
&lt;li&gt;客戶端接收到了服務端傳送完畢的訊息之後，就&lt;strong&gt;傳送ACK=1，告訴服務端，客戶端已經接收到你的訊息&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;參考資料-&#34;&gt;參考資料 👐&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;System expert&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.cloudflare.com/learning/ssl/what-happens-in-a-tls-handshake/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;what-happens-in-a-tls-handshake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;🍀 最後，若喜歡我的分享，可以幫我拍拍手👏，是對我最大的鼓勵!✨&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
